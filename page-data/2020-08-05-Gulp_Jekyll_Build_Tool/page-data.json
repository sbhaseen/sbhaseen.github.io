{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-08-05-Gulp_Jekyll_Build_Tool/","result":{"data":{"markdownRemark":{"html":"<p>I was looking for ways to perfrom minification and generally improve the developer experience in Jekyll. Jekyll is a nice and stable static site generator (SSG), but I feel it's lacking in some of the more modern tools such as a hot reloading development server and code splitting/minification. Without moving away to a completely new SSG library, I decided to patch in the missing features with Gulp.js task automation.</p>\n<hr>\n<h2>The problem to solve</h2>\n<p>This automation script for Gulp.js was first implemented on my personal blog, but I have used it in a few other static site projects since then.</p>\n<p>What I wanted was the following:</p>\n<ul>\n<li>Hot reloading browser: enter <code>broswer-sync</code></li>\n<li>JS/CSS minification: enter <code>gulp-sass</code>, <code>gulp-concat</code> and <code>gulp-uglify-es</code></li>\n<li>Maintain Jekyll to build content only when HTML or Markdown is changed: enter Node's <code>child_process</code> to run <code>bundle exec jekyll build</code></li>\n</ul>\n<p>A side note: I use SASS for more complex styles and thefore had to move from Jekyll's built-in support to Node-SASS.</p>\n<h2>Updating Jekyll's <code>_config.yml</code></h2>\n<p>In order to optimize Jekyll's building process, it is prudent to exclude all Node.js/NPM files and source code that will be compiled.</p>\n<pre><code class=\"language-yml\">exclude:\n  - package.json\n  - package-lock.json\n  - node_modules\n  - gulpfile.js\n  - src\n</code></pre>\n<h2>The gulpfile.js</h2>\n<p>This file assumes the Jekyll conventions for folder structures. Source code is placed in the <code>src</code> directory, and compliled code has two locations, one for development in <code>_site</code> and one in <code>assets</code> which will be used for building <code>_site</code> in produciton.</p>\n<p>Note I commented out sourcemaps, as I generally do not use them often, but can nonetheless be added if desired. This would need and additional <code>.pipe</code> in the <code>style</code> and <code>script</code> functions.</p>\n<p>Example with source maps:</p>\n<pre><code class=\"language-js\">gulp.task(\"javascript\", () => {\n  gulp\n    .src(\"src/**/*.js\")\n    .pipe(sourcemaps.init())\n    .pipe(sourcemaps.write())\n    .pipe(gulp.dest(\"dist\"))\n})\n</code></pre>\n<p>My <code>gulpfile</code>:</p>\n<pre><code class=\"language-js\">const gulp = require(\"gulp\")\nconst cp = require(\"child_process\")\nconst del = require(\"del\")\nconst sass = require(\"gulp-sass\")\n// const sourcemaps = require(\"gulp-sourcemaps\");\nconst autoprefixer = require(\"gulp-autoprefixer\")\nconst browserSync = require(\"browser-sync\").create()\nconst concat = require(\"gulp-concat\")\nconst rename = require(\"gulp-rename\")\nconst uglify = require(\"gulp-uglify-es\").default\n\nconst styleSrc = \"./src/sass/**/*.scss\"\nconst jsSrc = \"./src/js/**/*.js\"\n\nconst devStyleDest = \"./_site/assets/css/\"\nconst devJsDest = \"./_site/assets/js/\"\n\nconst styleDest = \"./assets/css/\"\nconst jsDest = \"./assets/js/\"\n\nconst sassOptions = {\n  outputStyle: \"compressed\",\n}\n\nfunction browserSyncInit(done) {\n  browserSync.init({ server: \"./_site\" })\n  done()\n}\n\nfunction browserSyncReload(done) {\n  browserSync.reload()\n  done()\n}\n\nfunction clean() {\n  return del([\"./_site/assets/\"])\n}\n\nfunction style() {\n  return gulp\n    .src(styleSrc)\n    .pipe(sass(sassOptions).on(\"error\", sass.logError))\n    .pipe(autoprefixer())\n    .pipe(rename(\"styles.min.css\"))\n    .pipe(gulp.dest(devStyleDest))\n    .pipe(gulp.dest(styleDest))\n    .pipe(browserSync.stream())\n}\n\nfunction scripts() {\n  return gulp\n    .src(jsSrc)\n    .pipe(concat(\"scripts.min.js\"))\n    .pipe(gulp.dest(devJsDest))\n    .pipe(uglify())\n    .pipe(gulp.dest(devJsDest))\n    .pipe(gulp.dest(jsDest))\n    .pipe(browserSync.stream())\n}\n\nfunction jekyll() {\n  return cp.spawn(\"bundle\", [\"exec\", \"jekyll\", \"build\"], { stdio: \"inherit\" })\n}\n\nfunction watchFiles() {\n  gulp.watch(styleSrc, style)\n  gulp.watch(jsSrc, scripts)\n  gulp.watch(\n    [\n      \"./_includes/**/*\",\n      \"./_layouts/**/*\",\n      \"./_pages/**/*\",\n      \"./_posts/**/*\",\n      \"./blog/**/*\",\n      \"./*.html\",\n    ],\n    gulp.series(jekyll, browserSyncReload)\n  )\n}\n\nconst build = gulp.series(clean, gulp.parallel(style, scripts, jekyll))\nconst watch = gulp.parallel(watchFiles, browserSyncInit)\n\nexports.style = style\nexports.scripts = scripts\nexports.jekyll = jekyll\nexports.clean = clean\nexports.build = build\nexports.watch = watch\nexports.default = watch\n</code></pre>\n<h2>Getting Started</h2>\n<p>Source files, located in the folder <code>src</code> are comprised of SASS (<code>scss</code> folder) and ES6 JavaScript (<code>scripts</code> folder).</p>\n<p>Gulp is used for the following:</p>\n<ul>\n<li>Spawn a child process that automates the Jekyll build process to run only for specifc change events.</li>\n<li>Compile SASS (<code>gulp-sass</code>) with auto-prefixing (<code>gulp-autoprefixer</code>) and then compressed to minified CSS</li>\n<li>JS files are first concanated into a single file then minified with <code>gulp-ugilfy-es</code>.</li>\n</ul>\n<p>The module <code>browser-sync</code> was used for live reloading during development.</p>\n<h3>Prerequisites</h3>\n<ul>\n<li>A Node.js installation with <code>npm</code> capable of running Gulp.</li>\n<li>A Ruby installation capable of running Jekyll.</li>\n</ul>\n<h3>Installing</h3>\n<p>For more information about installing Jekyll and a Ruby development environment see Jekyll's documentation <a href=\"https://jekyllrb.com/docs/installation/\">here</a>.</p>\n<p>To install Jekyll initially (assuming Ruby is already present), run:</p>\n<pre><code class=\"language-shell\">gem install jekyll bundler\n</code></pre>\n<p>Install the Gulp requirements locally with <code>npm</code>:</p>\n<pre><code class=\"language-shell\">npm install\n</code></pre>\n<p>For development use these scripts:</p>\n<pre><code class=\"language-shell\">gulp style\ngulp scripts\ngulp jekyll\ngulp clean\ngulp build\ngulp watch\n</code></pre>\n<p><code>watch</code> is the default process, hence just entering <code>gulp</code> will run the <code>watch</code> script.</p>\n<p><code>style</code> will complie the SASS to minifed CSS in the destination folder.</p>\n<p><code>scripts</code> will combine and minify the JavaScript scripts and send them to the destination folder</p>\n<p><code>jekyll</code> will run a child process that runs the ruby command <code>bundle exec jekyll build</code></p>\n<p><code>clean</code> will delete all contents in the destination folder.</p>\n<p><code>build</code> will run <code>clean</code> first then complie all styles and scripts while sending the data to the destination folder.</p>\n<p><code>watch</code> will run a development server, watch the <code>src</code> folder and <code>index.html</code> for changes, then compile SASS and JavaScript as needed, based on the changes.</p>\n<h2>Deployment</h2>\n<p>If a production build is required, use:</p>\n<pre><code class=\"language-shell\">gulp build\n</code></pre>\n<p>Then copy the <code>_site</code> folder to the desired destination.</p>\n<h2>Libraries Used</h2>\n<ul>\n<li><a href=\"https://jekyllrb.com/\">Jekyll</a> - A static site generator.</li>\n<li><a href=\"https://gulpjs.com/\">Gulp.js</a> - A toolkit for automating painful or time-consuming tasks in your development workflow.</li>\n<li><a href=\"https://github.com/sass/node-sass\">Node-SASS</a> - Node-SASS is a library that provides binding for Node.js to LibSass, the C version of the popular stylesheet preprocessor, Sass.</li>\n</ul>","frontmatter":{"date":"August 05, 2020","title":"Gulp.js Jekyll Build Tool","tags":["JavaScript","Node.js","Jekyll","Static Site Generation"]}}},"pageContext":{"slug":"/2020-08-05-Gulp_Jekyll_Build_Tool/"}},"staticQueryHashes":["63159454"]}