{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-07-01-Refactoring_to_async_await/","result":{"data":{"markdownRemark":{"html":"<p>Recently, I was refactoring some projects and came across documentation which demonstrated using Async/Await in place of then/catch for Promise based responses.</p>\n<p>I found this to yeild better readability for many scenarios, especially data fetching for API's. Thus I made this small post to detail some of the work I've done. This invloves mostly request/response callback in Express.js.</p>\n<hr>\n<h2>The then-catch original code</h2>\n<p>Here, we examine an API route written for and Express.js server using Mongoose for a database connection. The object <code>List</code> is a Mongoose data schema model.</p>\n<p>This is written using the <code>then</code> method to handle a promise based callback.</p>\n<pre><code class=\"language-js\">/**\n * GET /lists\n * @desc: Get all lists\n */\nrouter.get(\"/\", (req, res) => {\n  List.find()\n    .then(results => {\n      return res.status(200).json(results)\n    })\n    .catch(error => {\n      return res.status(500).json({ message: \"Failed to fetch list.\", error })\n    })\n})\n</code></pre>\n<h2>Code refactored to Async/Await in a try-catch block</h2>\n<p>This code is now refactored to use the <code>async</code> keyword to define the router callback funcation as asynchronous.</p>\n<p>The actual Promise based call is executed inside the <code>try</code> block which can catch errors in the following <code>catch</code> block.</p>\n<pre><code class=\"language-js\">/**\n * GET /lists\n * @desc: Get all lists\n */\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const results = await List.find()\n    return res.status(200).json(results)\n  } catch (error) {\n    return res.status(500).json({ message: \"Failed to fetch list.\", error })\n  }\n})\n</code></pre>\n<h2>Conclusions</h2>\n<p>Although this was a relatively simple example, using Async/Await can help to avoid callback hell in more complex scenarios with multiple promise based function calls.</p>\n<p>One possible scenario I can think of, would be where many microservice API's need to be queried at the same time (a dashboard app, for example).</p>","frontmatter":{"date":"July 01, 2020","title":"Refactoring to Async/Await","tags":["JavaScript","Node.js","Async","Promises"]}}},"pageContext":{"slug":"/2020-07-01-Refactoring_to_async_await/"}},"staticQueryHashes":["63159454"]}