{"version":3,"sources":["webpack:///./src/components/post-link.module.scss","webpack:///./src/components/post-link.js","webpack:///./src/templates/list.module.scss","webpack:///./src/templates/blog-list.js"],"names":["module","exports","PostLink","post","className","postLinkStyles","linkContainer","linkTitle","to","fields","slug","frontmatter","title","excerpt","BlogList","data","pageContext","postData","allMarkdownRemark","edges","map","node","key","id","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","listStyles","blogMain","pageNavContainer","paginationControl","role","aria-label","Array","from","length","_","i"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,cAAgB,0CAA0C,UAAY,sCAAsC,QAAU,qC,oCCDxI,4FAIe,SAASC,EAAT,GAA6B,IAATC,EAAQ,EAARA,KACjC,OACE,yBAAKC,UAAWC,IAAeC,eAC7B,kBAAC,OAAD,CAAMF,UAAWC,IAAeE,UAAWC,GAAIL,EAAKM,OAAOC,MACxDP,EAAKQ,YAAYC,OAEpB,uBAAGR,UAAWC,IAAeQ,SAAUV,EAAKU,SAAWV,EAAKU,Y,qBCTlEb,EAAOC,QAAU,CAAC,SAAW,gCAAgC,iBAAmB,yCAAyC,kBAAoB,2C,kCCD7I,6IASe,SAASa,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAGjCC,EAFQF,EAAKG,kBAAkBC,MAEdC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACzB,kBAAC,IAAD,CAAUC,IAAKD,EAAKE,GAAIpB,KAAMkB,OAGxBG,EAA0BR,EAA1BQ,YAAaC,EAAaT,EAAbS,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EAEzBG,EAAWJ,EAAc,GAAM,EAAI,IAAMA,EAAc,GAAGK,WAC1DC,GAAYN,EAAc,GAAGK,WAEnC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKjB,MAAM,SACX,6BAASR,UAAW,6BAA+B2B,IAAWC,UAC5D,yBAAK5B,UAAU,cACb,wBAAIA,UAAU,SAAd,QACCa,GAEFQ,EAAW,EACV,yBAAKrB,UAAW2B,IAAWE,kBACzB,yBACE7B,UACE,0BAA4B2B,IAAWG,kBAEzCC,KAAK,aACLC,aAAW,eAETV,GACA,kBAAC,OAAD,CAAMtB,UAAU,sBAAsBI,GAAE,SAAWoB,GAAnD,mBAIF,wBAAIxB,UAAU,mBACXiC,MAAMC,KAAK,CAAEC,OAAQd,IAAY,SAACe,EAAGC,GAAJ,OAChC,wBAAInB,IAAG,qBAAsBmB,EAAI,IAC/B,kBAAC,OAAD,CACErC,UAAU,kBACVI,GAAE,UAAiB,IAANiC,EAAU,GAAKA,EAAI,IAE/BA,EAAI,EAAG,WAMdd,GACA,kBAAC,OAAD,CAAMvB,UAAU,kBAAkBI,GAAE,SAAWsB,GAA/C,iBAMJ","file":"component---src-templates-blog-list-js-39d3582c227a0f68b452.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"linkContainer\":\"post-link-module--link-container--2kcQZ\",\"linkTitle\":\"post-link-module--link-title--17aTZ\",\"excerpt\":\"post-link-module--excerpt--9A5O0\"};","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport postLinkStyles from \"./post-link.module.scss\"\n\nexport default function PostLink({ post }) {\n  return (\n    <div className={postLinkStyles.linkContainer}>\n      <Link className={postLinkStyles.linkTitle} to={post.fields.slug}>\n        {post.frontmatter.title}\n      </Link>\n      <p className={postLinkStyles.excerpt}>{post.excerpt && post.excerpt}</p>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blogMain\":\"list-module--blog-main--3BFol\",\"pageNavContainer\":\"list-module--page-nav-container--IYUVO\",\"paginationControl\":\"list-module--pagination-control--2yO49\"};","import React from \"react\"\n\nimport { Link, graphql } from \"gatsby\"\n\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/layout\"\nimport PostLink from \"../components/post-link\"\nimport listStyles from \"./list.module.scss\"\n\nexport default function BlogList({ data, pageContext }) {\n  const posts = data.allMarkdownRemark.edges\n\n  const postData = posts.map(({ node }) => (\n    <PostLink key={node.id} post={node} />\n  ))\n\n  const { currentPage, numPages } = pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n\n  const prevPage = currentPage - 1 === 1 ? \"\" : (currentPage - 1).toString()\n  const nextPage = (currentPage + 1).toString()\n\n  return (\n    <Layout>\n      <SEO title=\"Blog\" />\n      <section className={\"section has-text-centered \" + listStyles.blogMain}>\n        <div className=\"container \">\n          <h1 className=\"title\">Blog</h1>\n          {postData}\n        </div>\n        {numPages > 1 ? (\n          <div className={listStyles.pageNavContainer}>\n            <nav\n              className={\n                \"pagination is-centered \" + listStyles.paginationControl\n              }\n              role=\"navigation\"\n              aria-label=\"pagination\"\n            >\n              {!isFirst && (\n                <Link className=\"pagination-previous\" to={`/blog/${prevPage}`}>\n                  ← Previous Page\n                </Link>\n              )}\n              <ul className=\"pagination-list\">\n                {Array.from({ length: numPages }, (_, i) => (\n                  <li key={`pagination-number${i + 1}`}>\n                    <Link\n                      className=\"pagination-link\"\n                      to={`/blog/${i === 0 ? \"\" : i + 1}`}\n                    >\n                      {i + 1}{\" \"}\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n\n              {!isLast && (\n                <Link className=\"pagination-next\" to={`/blog/${nextPage}`}>\n                  Next Page →\n                </Link>\n              )}\n            </nav>\n          </div>\n        ) : null}\n      </section>\n    </Layout>\n  )\n}\n\nexport const blogListQuery = graphql`\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      filter: { fields: { collection: { eq: \"blog\" } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}